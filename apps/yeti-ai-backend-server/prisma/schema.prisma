datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Agent {
  activeSession String?
  createdAt     DateTime            @default(now())
  description   String?
  id            String              @id @default(cuid())
  memoryLogs    MemoryLog[]
  name          String?
  status        EnumAgentStatus?
  tasks         Task[]
  typeField     EnumAgentTypeField?
  updatedAt     DateTime            @updatedAt
  user          User?               @relation(fields: [userId], references: [id])
  userId        String?
}

model Task {
  agent          Agent?          @relation(fields: [agentId], references: [id])
  agentId        String?
  createdAt      DateTime        @default(now())
  description    String?
  id             String          @id @default(cuid())
  output         String?
  parentTask     String?
  relatedSession String?
  scheduledTime  DateTime?
  status         EnumTaskStatus?
  title          String?
  updatedAt      DateTime        @updatedAt
}

model MemoryLog {
  agent       Agent?                  @relation(fields: [agentId], references: [id])
  agentId     String?
  content     String?
  createdAt   DateTime                @default(now())
  id          String                  @id @default(cuid())
  relatedTask String?
  session     Session?                @relation(fields: [sessionId], references: [id])
  sessionId   String?
  timestamp   DateTime?
  typeField   EnumMemoryLogTypeField?
  updatedAt   DateTime                @updatedAt
}

model Plugin {
  configField        Json?
  createdAt          DateTime          @default(now())
  description        String?
  id                 String            @id @default(cuid())
  name               String?
  permissionRequired Boolean?
  status             EnumPluginStatus?
  updatedAt          DateTime          @updatedAt
  version            String?
}

model Integration {
  configField Json?
  createdAt   DateTime                  @default(now())
  id          String                    @id @default(cuid())
  lastSync    DateTime?
  status      EnumIntegrationStatus?
  typeField   EnumIntegrationTypeField?
  updatedAt   DateTime                  @updatedAt
  user        User?                     @relation(fields: [userId], references: [id])
  userId      String?
}

model Session {
  createdAt  DateTime    @default(now())
  endTime    DateTime?
  id         String      @id @default(cuid())
  memoryLogs MemoryLog[]
  startTime  DateTime?
  updatedAt  DateTime    @updatedAt
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
}

model User {
  agents       Agent[]
  createdAt    DateTime      @default(now())
  email        String?       @unique
  firstName    String?
  id           String        @id @default(cuid())
  integrations Integration[]
  lastName     String?
  password     String
  preferences  Json?
  roles        Json
  sessions     Session[]
  updatedAt    DateTime      @updatedAt
  username     String        @unique
}

enum EnumAgentStatus {
  Option1
}

enum EnumAgentTypeField {
  Option1
}

enum EnumTaskStatus {
  Option1
}

enum EnumMemoryLogTypeField {
  Option1
}

enum EnumPluginStatus {
  Option1
}

enum EnumIntegrationStatus {
  Option1
}

enum EnumIntegrationTypeField {
  Option1
}
