/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Integration as PrismaIntegration } from "@prisma/client";

export class IntegrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.IntegrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.integration.count(args);
  }

  async integrations(
    args: Prisma.IntegrationFindManyArgs
  ): Promise<PrismaIntegration[]> {
    return this.prisma.integration.findMany(args);
  }
  async integration(
    args: Prisma.IntegrationFindUniqueArgs
  ): Promise<PrismaIntegration | null> {
    return this.prisma.integration.findUnique(args);
  }
  async createIntegration(
    args: Prisma.IntegrationCreateArgs
  ): Promise<PrismaIntegration> {
    return this.prisma.integration.create(args);
  }
  async updateIntegration(
    args: Prisma.IntegrationUpdateArgs
  ): Promise<PrismaIntegration> {
    return this.prisma.integration.update(args);
  }
  async deleteIntegration(
    args: Prisma.IntegrationDeleteArgs
  ): Promise<PrismaIntegration> {
    return this.prisma.integration.delete(args);
  }
}
