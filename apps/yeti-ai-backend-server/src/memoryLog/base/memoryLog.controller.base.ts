/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MemoryLogService } from "../memoryLog.service";
import { MemoryLogCreateInput } from "./MemoryLogCreateInput";
import { MemoryLog } from "./MemoryLog";
import { MemoryLogFindManyArgs } from "./MemoryLogFindManyArgs";
import { MemoryLogWhereUniqueInput } from "./MemoryLogWhereUniqueInput";
import { MemoryLogUpdateInput } from "./MemoryLogUpdateInput";

export class MemoryLogControllerBase {
  constructor(protected readonly service: MemoryLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MemoryLog })
  async createMemoryLog(
    @common.Body() data: MemoryLogCreateInput
  ): Promise<MemoryLog> {
    return await this.service.createMemoryLog({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MemoryLog] })
  @ApiNestedQuery(MemoryLogFindManyArgs)
  async memoryLogs(@common.Req() request: Request): Promise<MemoryLog[]> {
    const args = plainToClass(MemoryLogFindManyArgs, request.query);
    return this.service.memoryLogs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MemoryLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async memoryLog(
    @common.Param() params: MemoryLogWhereUniqueInput
  ): Promise<MemoryLog | null> {
    const result = await this.service.memoryLog({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MemoryLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMemoryLog(
    @common.Param() params: MemoryLogWhereUniqueInput,
    @common.Body() data: MemoryLogUpdateInput
  ): Promise<MemoryLog | null> {
    try {
      return await this.service.updateMemoryLog({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MemoryLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMemoryLog(
    @common.Param() params: MemoryLogWhereUniqueInput
  ): Promise<MemoryLog | null> {
    try {
      return await this.service.deleteMemoryLog({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
