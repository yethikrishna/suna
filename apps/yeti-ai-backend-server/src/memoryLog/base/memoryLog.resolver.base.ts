/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MemoryLog } from "./MemoryLog";
import { MemoryLogCountArgs } from "./MemoryLogCountArgs";
import { MemoryLogFindManyArgs } from "./MemoryLogFindManyArgs";
import { MemoryLogFindUniqueArgs } from "./MemoryLogFindUniqueArgs";
import { CreateMemoryLogArgs } from "./CreateMemoryLogArgs";
import { UpdateMemoryLogArgs } from "./UpdateMemoryLogArgs";
import { DeleteMemoryLogArgs } from "./DeleteMemoryLogArgs";
import { Agent } from "../../agent/base/Agent";
import { Session } from "../../session/base/Session";
import { MemoryLogService } from "../memoryLog.service";
@graphql.Resolver(() => MemoryLog)
export class MemoryLogResolverBase {
  constructor(protected readonly service: MemoryLogService) {}

  async _memoryLogsMeta(
    @graphql.Args() args: MemoryLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MemoryLog])
  async memoryLogs(
    @graphql.Args() args: MemoryLogFindManyArgs
  ): Promise<MemoryLog[]> {
    return this.service.memoryLogs(args);
  }

  @graphql.Query(() => MemoryLog, { nullable: true })
  async memoryLog(
    @graphql.Args() args: MemoryLogFindUniqueArgs
  ): Promise<MemoryLog | null> {
    const result = await this.service.memoryLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MemoryLog)
  async createMemoryLog(
    @graphql.Args() args: CreateMemoryLogArgs
  ): Promise<MemoryLog> {
    return await this.service.createMemoryLog({
      ...args,
      data: {
        ...args.data,

        agent: args.data.agent
          ? {
              connect: args.data.agent,
            }
          : undefined,

        session: args.data.session
          ? {
              connect: args.data.session,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MemoryLog)
  async updateMemoryLog(
    @graphql.Args() args: UpdateMemoryLogArgs
  ): Promise<MemoryLog | null> {
    try {
      return await this.service.updateMemoryLog({
        ...args,
        data: {
          ...args.data,

          agent: args.data.agent
            ? {
                connect: args.data.agent,
              }
            : undefined,

          session: args.data.session
            ? {
                connect: args.data.session,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MemoryLog)
  async deleteMemoryLog(
    @graphql.Args() args: DeleteMemoryLogArgs
  ): Promise<MemoryLog | null> {
    try {
      return await this.service.deleteMemoryLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Agent, {
    nullable: true,
    name: "agent",
  })
  async getAgent(@graphql.Parent() parent: MemoryLog): Promise<Agent | null> {
    const result = await this.service.getAgent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Session, {
    nullable: true,
    name: "session",
  })
  async getSession(
    @graphql.Parent() parent: MemoryLog
  ): Promise<Session | null> {
    const result = await this.service.getSession(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
