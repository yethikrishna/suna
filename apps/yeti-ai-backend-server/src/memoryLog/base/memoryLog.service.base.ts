/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MemoryLog as PrismaMemoryLog,
  Agent as PrismaAgent,
  Session as PrismaSession,
} from "@prisma/client";

export class MemoryLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MemoryLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.memoryLog.count(args);
  }

  async memoryLogs(
    args: Prisma.MemoryLogFindManyArgs
  ): Promise<PrismaMemoryLog[]> {
    return this.prisma.memoryLog.findMany(args);
  }
  async memoryLog(
    args: Prisma.MemoryLogFindUniqueArgs
  ): Promise<PrismaMemoryLog | null> {
    return this.prisma.memoryLog.findUnique(args);
  }
  async createMemoryLog(
    args: Prisma.MemoryLogCreateArgs
  ): Promise<PrismaMemoryLog> {
    return this.prisma.memoryLog.create(args);
  }
  async updateMemoryLog(
    args: Prisma.MemoryLogUpdateArgs
  ): Promise<PrismaMemoryLog> {
    return this.prisma.memoryLog.update(args);
  }
  async deleteMemoryLog(
    args: Prisma.MemoryLogDeleteArgs
  ): Promise<PrismaMemoryLog> {
    return this.prisma.memoryLog.delete(args);
  }

  async getAgent(parentId: string): Promise<PrismaAgent | null> {
    return this.prisma.memoryLog
      .findUnique({
        where: { id: parentId },
      })
      .agent();
  }

  async getSession(parentId: string): Promise<PrismaSession | null> {
    return this.prisma.memoryLog
      .findUnique({
        where: { id: parentId },
      })
      .session();
  }
}
